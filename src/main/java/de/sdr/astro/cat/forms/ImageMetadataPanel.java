package de.sdr.astro.cat.forms;

import de.sdr.astro.cat.config.Config;
import de.sdr.astro.cat.model.Image;
import de.sdr.astro.cat.metadata.ExifData;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import java.awt.*;
import java.util.List;

public class ImageMetadataPanel {

    private Image image;
    private JPanel topPanel;
    private JPanel panelBaseData;
    private JPanel panelDetailData;
    private JTable tableBaseData;
    private JTable tableDetailData;
    private JScrollPane scrollPaneDetailData;
    private JScrollPane scrollPaneBaseData;
    private JTextArea textAreaInfo;
    private JLabel lblName;
    private JLabel lblDateTime;
    private JSplitPane splitPaneImageMetadata;

    private ExifData exiftool;

    public JPanel getTopPanel() {
        return topPanel;
    }

    public void setImage(Image image) {
        this.image = image;
        lblName.setText(String.format("%s (%s)", image.getName(), image.getType()));
        lblDateTime.setText(String.format(Config.getInstance().getL10n().getString("metadatapanel_capture.time"), image.getMetadata().getDate(), image.getMetadata().getTime()));
        intitializeBaseDataTable();
        intitializeDetailDataTable();
    }

    private void intitializeBaseDataTable() {
        String[] columnNames = {
                Config.getInstance().getL10n().getString("common_property"),
                Config.getInstance().getL10n().getString("common_value"),
                Config.getInstance().getL10n().getString("common_description")
        };

        List<List<String>> rows = image.getMetadata().baseDataAs2DArray();

        TableModel dataModel = new TableModelMetadata(columnNames, rows);
        setTableFormatting(tableBaseData);
        tableBaseData.setModel(dataModel);
    }

    private void intitializeDetailDataTable() {
        String[] columnNames = {
                Config.getInstance().getL10n().getString("common_property"),
                Config.getInstance().getL10n().getString("common_value"),
                Config.getInstance().getL10n().getString("common_description")
        };

        List<List<String>> rows = image.getMetadata().detailDataAs2DArray();

        TableModel dataModel = new TableModelMetadata(columnNames, rows);
        setTableFormatting(tableDetailData);
        tableDetailData.setModel(dataModel);
    }

    private void setTableFormatting(JTable table) {
        Font font = table.getTableHeader().getFont();
        table.getTableHeader().setFont(font.deriveFont(Font.BOLD));
        ((DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.LEFT);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPanel = new JPanel();
        topPanel.setLayout(new GridBagLayout());
        lblName = new JLabel();
        lblName.setText("Name");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(lblName, gbc);
        lblDateTime = new JLabel();
        lblDateTime.setText("DateTime");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(lblDateTime, gbc);
        splitPaneImageMetadata = new JSplitPane();
        splitPaneImageMetadata.setDividerLocation(191);
        splitPaneImageMetadata.setDividerSize(8);
        splitPaneImageMetadata.setOrientation(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.weightx = 0.5;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        topPanel.add(splitPaneImageMetadata, gbc);
        panelBaseData = new JPanel();
        panelBaseData.setLayout(new GridBagLayout());
        splitPaneImageMetadata.setLeftComponent(panelBaseData);
        panelBaseData.setBorder(BorderFactory.createTitledBorder(null, "Basisdaten", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scrollPaneBaseData = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panelBaseData.add(scrollPaneBaseData, gbc);
        tableBaseData = new JTable();
        scrollPaneBaseData.setViewportView(tableBaseData);
        panelDetailData = new JPanel();
        panelDetailData.setLayout(new GridBagLayout());
        splitPaneImageMetadata.setRightComponent(panelDetailData);
        panelDetailData.setBorder(BorderFactory.createTitledBorder(null, "erweiterte Metadaten (FITS oder EXIF)", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panelDetailData.add(spacer1, gbc);
        scrollPaneDetailData = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panelDetailData.add(scrollPaneDetailData, gbc);
        tableDetailData = new JTable();
        scrollPaneDetailData.setViewportView(tableDetailData);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer6, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}

class TableModelMetadata extends AbstractTableModel {

    private final String[] columnNames;
    private final List<List<String>> rows;

    public TableModelMetadata(String[] columnNames, List<List<String>> rows) {
        this.columnNames = columnNames;
        this.rows = rows;
    }

    @Override
    public int getRowCount() {
        return rows.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public Object getValueAt(int row, int column) {
        return rows.get(row).get(column);
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) { return false; }
}
