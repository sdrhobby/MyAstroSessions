package de.sdr.astro.cat.forms;

import de.sdr.astro.cat.config.Config;
import de.sdr.astro.cat.model.Image;
import de.sdr.astro.cat.model.LightImage;
import de.sdr.astro.cat.model.Model;
import de.sdr.astro.cat.util.Util;
import de.sdr.astro.cat.model.Session;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.*;
import java.util.List;

public class ImageMetadataListPanel {
    private JPanel topPanel;
    private JLabel lblObjectName;
    private JLabel lblImageType;
    private JTable tableImageList;
    private JLabel lblSessionName;

    public JPanel getTopPanel() {
        return topPanel;
    }

    public void initialize(Session session, String imageType, String filter) {
        lblObjectName.setText(session.getAstroObjectName());
        lblSessionName.setText(session.getName());
        String type = imageType + ((filter.isEmpty()) ? "" : ": " + filter);
        lblImageType.setText(type);

        fillImageListTable(session, imageType, filter);
    }

    private void fillImageListTable(Session session, String imageType, String filter) {
        ArrayList<String> columnNameList = new ArrayList<>();
        columnNameList.add(Config.getInstance().getL10n().getString("common_name"));
        columnNameList.add(Config.getInstance().getL10n().getString("common_width"));
        columnNameList.add(Config.getInstance().getL10n().getString("common_height"));
        if (Model.LIGHTS.equals(imageType)) {
            columnNameList.add("Filter");
        }
        columnNameList.add("Exposure");
        columnNameList.add("ISO");
        columnNameList.add("Gain");
        columnNameList.add("Bias");
        String[] columnNames = columnNameList.toArray(new String[0]);

        Vector<Vector<String>> rows = new Vector<>();

        fillImageInfo(session, imageType, rows, filter);

        TableModel dataModel = new DefaultTableModel() {
            @Override
            public String getColumnName(int column) {
                return columnNames[column];
            }

            public int getColumnCount() {
                return columnNames.length;
            }

            public int getRowCount() {
                return rows.size();
            }

            public Object getValueAt(int row, int col) {
                return rows.get(row).get(col);
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        Font font = tableImageList.getTableHeader().getFont();
        tableImageList.getTableHeader().setFont(font.deriveFont(Font.BOLD));
        ((DefaultTableCellRenderer) tableImageList.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.LEFT);
        tableImageList.setModel(dataModel);
    }

    private void fillImageInfo(Session session, String imageType, Vector<Vector<String>> rows, String filter) {
        // take full list per imageType as default
        List<Image> images = session.getImageMap().get(imageType);

        // if imageType == LIGHTS and filter is given, then only take the images belonging to that filter
        if (Model.LIGHTS.equals(imageType) && !filter.isEmpty()) {
            images = session.createLightFiltersMap().get(filter);
        }

        images.forEach((image) -> {
            final Vector<String> r = new Vector<>();
            r.add(image.getName());
            r.add("" + image.getMetadata().getWidth());
            r.add("" + image.getMetadata().getHeight());
            if (Model.LIGHTS.equals(imageType))
                r.add("" + ((image instanceof LightImage) ? ((LightImage) image).getFilter() : ""));
            r.add(Util.formatExposure(image.getMetadata().getExposure()) + " s");
            r.add("" + nonNull(image.getMetadata().getIso()));
            r.add("" + nonNull(image.getMetadata().getGain()));
            r.add("" + nonNull(image.getMetadata().getBias()));
            rows.add(r);
        });
    }

    private String nonNull(Object o) {
        return o != null ? o.toString() : "";
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPanel = new JPanel();
        topPanel.setLayout(new GridBagLayout());
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer2, gbc);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("l10n", "sessioninfo_image.type"));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(label1, gbc);
        lblImageType = new JLabel();
        Font lblImageTypeFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblImageType.getFont());
        if (lblImageTypeFont != null) lblImageType.setFont(lblImageTypeFont);
        lblImageType.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(lblImageType, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer5, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 7;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.fill = GridBagConstraints.BOTH;
        topPanel.add(scrollPane1, gbc);
        tableImageList = new JTable();
        scrollPane1.setViewportView(tableImageList);
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, this.$$$getMessageFromBundle$$$("l10n", "common_object"));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(label2, gbc);
        lblObjectName = new JLabel();
        Font lblObjectNameFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblObjectName.getFont());
        if (lblObjectNameFont != null) lblObjectName.setFont(lblObjectNameFont);
        lblObjectName.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(lblObjectName, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 20, 0, 0);
        topPanel.add(spacer6, gbc);
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, this.$$$getMessageFromBundle$$$("l10n", "common_session"));
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(label3, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer7, gbc);
        lblSessionName = new JLabel();
        Font lblSessionNameFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblSessionName.getFont());
        if (lblSessionNameFont != null) lblSessionName.setFont(lblSessionNameFont);
        lblSessionName.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        topPanel.add(lblSessionName, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer8, gbc);
        final JPanel spacer9 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        topPanel.add(spacer9, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}
